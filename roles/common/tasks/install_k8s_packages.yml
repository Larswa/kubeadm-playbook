---
# Debian based (includes Ubuntu) prerequisites for using apt-get from ansible:
- name: Install apt-transport-https
  package: name={{ item }} state={{ package_state | default ('present') }}
  environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - apt-transport-https
  when: ansible_os_family == "Debian"

  # Create deb/yum repos for kubernetes packages (kube*, cni, etc.)
- block:
  # Debian based (includes Ubuntu)
  - apt_key:
      url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
      state: present
    environment: '{{ proxy_env | default ({}) }}'
    when: ansible_os_family == "Debian"

  - apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      #filename: 'kubernetes.list'
      update_cache: yes
    environment: '{{ proxy_env | default ({}) }}'
    when: ansible_os_family == "Debian"

  # RedHat based (includes CentOS, RHEL, Fedora, Oracle, etc.)
  - name: Create kubernetes yum repository
    yum_repository:
      name: kubernetes
      description: Kubernetes
      baseurl: http://yum.kubernetes.io/repos/kubernetes-el7-x86_64
      gpgcheck: 0
    when: ansible_os_family == "RedHat" and HOST_ARCH == "amd64"

  - name: add proxy for the repo
    ini_file:
      dest: /etc/yum.repos.d/kubernetes.repo
      section: "{{item}}"
      option: proxy
      value: "{{proxy_env.https_proxy | default ('') }}"
    with_items: [ 'kubernetes' ]
    when:
    - proxy_env is defined
    - proxy_env.https_proxy is defined
    #- proxy_env.https_proxy | length > 0
    - ansible_os_family == "RedHat"
  when: kubernetes_repo_create | default('true')

- name: Clean yum metadata
  command: yum clean all
  args:
    warn: no
  when: ansible_os_family == "RedHat" and package_state is defined and package_state == "latest"

- name: apt-get clean metadata
  command: apt-get clean ; apt-file purge
  args:
    warn: no
  when: ansible_os_family == "Debian" and package_state is defined and package_state == "latest"

# End OS dependent repo setup

### socat
- name: Ansible check /usr/bin/socat exists
  stat:
    path: /usr/bin/socat
  register: statsocat

- name: Install socat from centos/rhel/ubuntu repo
  package: name={{ item }} state={{ package_state | default ('present') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - socat
  when: statsocat.stat.exists is not defined or statsocat.stat.exists == False

### tc (iptables-tc)
- name: Ansible check /usr/sbin/tc exists
  stat:
    path: /usr/sbin/tc
  register: stattc

- name: Install tc/iproute-tc from centos/rhel/ubuntu repo
  package: name={{ item }} state={{ package_state | default ('present') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - iproute-tc
  when:
  - stattc.stat.exists is not defined or stattc.stat.exists == False
  - ansible_os_family == "RedHat"

- name: Install tc/iproute2 Ubuntu/Debian
  package: name={{ item }} state={{ package_state | default ('present') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - iproute2
  when:
  - stattc.stat.exists is not defined or stattc.stat.exists == False
  - ansible_os_family == "Debian"

### ipset
- name: Ansible check /usr/sbin/ipset exists
  stat:
    # ubuntu 18.04 /sbin/ipset, but we skip checking it there to simplify code. Keeping only ubuntu 20.04 and rhel based
    path: /usr/sbin/ipset
  register: statipset

- name: Install ipset from centos/rhel/ubuntu repo
  package: name={{ item }} state={{ package_state | default ('present') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - ipset
  when: statipset.stat.exists is not defined or statipset.stat.exists == False

### unhold (debian)
- name: unhold before upgrade/install packages (when on debian)
  shell: apt-mark unhold {{ item }}
  ignore_errors: yes
  with_items:
  - kubeadm
  - kubelet
  - kubectl
  - kubernetes-cni
  - cri-tools
  - containernetworking-plugins
  when:
  - full_kube_apt_unhold | default (False)
  - ansible_os_family == "Debian"
  - kubelet_version is defined and kubelet_version!='present'
  - kubectl_version is defined and kubectl_version!='present'
  - kubeadm_version is defined and kubeadm_version!='present'

- name: make sure there is no package containernetworking-plugins as it conflicts with kubernetes-cni
  package: name={{ item }} state=absent
  with_items:
  - containernetworking-plugins

### kubelet
- name: Install kubelet when kubelet_version is not defined
  package: name={{ item }} state={{ package_state | default ('present') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubelet
  when: kubelet_version is not defined

- name: Install kubelet when Debian and kubelet_version is defined
  package: name="{{ item }}={{kubelet_version | regex_replace('v')}}*" state=present force=yes
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubelet
  when: kubelet_version is defined and ( kubelet_version!='present' or kubelet_version!='latest' ) and ansible_os_family == "Debian" 

- name: Install kubelet when RedHat and kubelet_version is defined
  package: name="{{ item }}-{{kubelet_version | regex_replace('v')}}" state=present allow_downgrade=yes
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubelet
  when: kubelet_version is defined and ( kubelet_version!='present' or kubelet_version!='latest' ) and ansible_os_family == "RedHat"

- name: Install kubelet when kubelet_version is latest
  package: name={{ item }} state={{kubelet_version}}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubelet
  when: kubelet_version is defined and ( kubelet_version=='present' or kubelet_version=='latest' )

##############
### kubectl
- name: Install kubectl when kubectl_version not defined
  package: name={{ item }} state={{ package_state | default ('present') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubectl
  when: kubectl_version is not defined

- name: Install kubectl when Debian and when kubectl_version is defined # ansible bug 29705
  package: name="{{ item }}={{kubectl_version | regex_replace('v')}}*" state=present force=yes
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubectl
  when: kubectl_version is defined and ( kubectl_version!='present' or kubectl_version!='latest' ) and ansible_os_family == "Debian"

- name: Install kubectl when RedHat and when kubectl_version is defined
  package: name="{{ item }}-{{kubectl_version | regex_replace('v')}}" state=present allow_downgrade=yes
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubectl
  when: kubectl_version is defined and ( kubectl_version!='present' or kubectl_version!='latest' ) and ansible_os_family == "RedHat"

- name: Install kubectl when kubectl_version is latest
  package: name={{ item }} state={{kubectl_version}}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubectl
  when: kubectl_version is defined and ( kubectl_version=='present' or kubectl_version=='latest' )

#############
### kubeadm
- name: Install kubeadm when kubeadm_version is not defined
  package: name={{ item }} state={{ package_state | default ('present') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is not defined

- name: Install kubeadm when Debian and kubeadm_version is defined # ansible bug 29705
  package: name="{{ item }}={{kubeadm_version | regex_replace('v')}}*" state=present force=yes
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is defined and ( kubeadm_version!='present' or kubeadm_version!='latest' ) and ansible_os_family == "Debian"

- name: Install kubeadm when RedHat and kubeadm_version is defined
  package: name="{{ item }}-{{kubeadm_version | regex_replace('v')}}" state=present allow_downgrade=yes
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is defined and ( kubeadm_version!='present' or kubeadm_version!='latest' ) and ansible_os_family == "RedHat"

- name: Install kubeadm when kubeadm_version is latest
  package: name={{ item }} state={{kubeadm_version}}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is defined and ( kubeadm_version=='present' or kubeadm_version=='latest' )

#- name: Install packages
#  package: name={{ item }} state={{ package_state | default ('present') }}
#  environment: '{{ proxy_env | default ({}) }}'
#  with_items:
  #- kubernetes-cni # already installed by kubelet anyway
  #- docker # for RH, but could be installed manually, so no checks here.
  #- kubeadm
  #- docker.io # for ubuntu


